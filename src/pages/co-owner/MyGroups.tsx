import { useState, useEffect } from "react";
import { useNavigate, Link } from "react-router-dom";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
    Dialog,
    DialogContent,
    DialogDescription,
    DialogFooter,
    DialogHeader,
    DialogTitle
} from "@/components/ui/dialog";
import { Users, ArrowLeft, LogOut, AlertTriangle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useSEO } from "@/hooks/useSEO";
import axiosClient from "@/api/axiosClient";
export default function MyGroups() {
    useSEO({
        title: "Nh√≥m c·ªßa t√¥i | EcoShare",
        description: "Qu·∫£n l√Ω c√°c nh√≥m ƒë·ªìng s·ªü h·ªØu b·∫°n tham gia: ch·ªß s·ªü h·ªØu, vai tr√≤ v√† th√†nh vi√™n.",
        canonicalPath: "/co-owner/groups",
    });
    const tokenUser = localStorage.getItem("accessToken") || "{}";
    const [currentUserId, setCurrentUserId] = useState<number | null>(null);
    const navigate = useNavigate();
    const { toast } = useToast();
    const [leaveRequestDialogOpen, setLeaveRequestDialogOpen] = useState(false);
    const [selectedGroup, setSelectedGroup] = useState<string | number>("");
    const [groups, setGroups] = useState<any[]>([]);
    useEffect(() => {
        const fetchCurrentUser = async () => {
            try {
                const res = await axiosClient.get("/auth/current");

                setCurrentUserId(res.data.id);
            } catch (err) {
                console.error("L·ªói l·∫•y user hi·ªán t·∫°i:", err);
            }
        };
        fetchCurrentUser();
    }, []);
    const handleRequestLeave = (groupId: number) => {
        setSelectedGroup(groupId);
        setLeaveRequestDialogOpen(true);
    };
    useEffect(() => {
        const fetchGroups = async () => {
            try {
                console.log("‚è≥ ƒêang g·ªçi API: /group/get/current...");
                const res = await axiosClient.get("/group/get/current");
                const data = res?.data;
                console.log("üì• D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API /group/get/current:", data);
                // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ ƒë√∫ng d·∫°ng m·∫£ng kh√¥ng
                if (!Array.isArray(data)) {
                    console.warn("‚ö†Ô∏è API kh√¥ng tr·∫£ v·ªÅ m·∫£ng group:", data);
                    setGroups([]);
                    return;
                }

                console.log("‚úÖ Danh s√°ch group nh·∫≠n ƒë∆∞·ª£c:", data);
                setGroups(data);
            } catch (error) {
                console.error("‚ùå L·ªói khi g·ªçi API /group/get/current:", error);
                setGroups([]);
            }
        };

        fetchGroups();
    }, []);


    const confirmRequestLeave = async () => {
        try {
            console.log("‚è≥ G·ª≠i y√™u c·∫ßu r·ªùi nh√≥m...");

            // 1. L·∫•y group hi·ªán t·∫°i
            const group = groups.find(g => g.group.groupId === selectedGroup);
            if (!group) {
                console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y group trong d·ªØ li·ªáu tr·∫£ v·ªÅ:", groups);
                toast({
                    title: "L·ªói",
                    description: "B·∫°n hi·ªán kh√¥ng n·∫±m trong nh√≥m n√†o.",
                    variant: "destructive"
                });
                setLeaveRequestDialogOpen(false);
                return;
            }

            // 2. L·∫•y user t·ª´ token/localStorage
            if (!currentUserId) {
                console.error("‚ùå Kh√¥ng t√¨m th·∫•y userId trong accessToken:", tokenUser);
                toast({
                    title: "L·ªói x√°c th·ª±c",
                    description: "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
                    variant: "destructive",
                });
                return;
            }

            // 3. G·ª≠i request r·ªùi nh√≥m
            console.log("üì§ ƒêang g·ª≠i request r·ªùi nh√≥m v·ªõi payload:", {
                groupId: group.group.groupId,
                userId: currentUserId,
            });

            await axiosClient.post("/group/request", {
                groupId: group.group.groupId,
                userId: currentUserId,
                nameRequestGroup: `Y√™u c·∫ßu r·ªùi nh√≥m - ${currentUserId}`,
                descriptionRequestGroup: "Ng∆∞·ªùi d√πng y√™u c·∫ßu r·ªùi nh√≥m",
                statusRequestGroup: "pending"
            });

            console.log("‚úÖ G·ª≠i request th√†nh c√¥ng!");

            toast({
                title: "ƒê√£ g·ª≠i y√™u c·∫ßu",
                description: `Y√™u c·∫ßu r·ªùi nh√≥m ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn nh√¢n vi√™n x·ª≠ l√Ω.`,
            });

            setLeaveRequestDialogOpen(false);

        } catch (error: any) {
            console.error("‚ùå L·ªói khi g·ª≠i request r·ªùi nh√≥m:", error);

            // Ph√¢n lo·∫°i l·ªói gi·ªëng ·ªü ƒëo·∫°n tr∆∞·ªõc
            if (error.response) {
                console.error("üìå Backend tr·∫£ l·ªói:", {
                    status: error.response.status,
                    data: error.response.data,
                });
            } else if (error.request) {
                console.error("üìå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server:", error.request);
            } else {
                console.error("üìå L·ªói kh√°c:", error.message);
            }

            toast({
                title: "L·ªói",
                description: "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.",
                variant: "destructive",
            });
        }
    };
    if (currentUserId === null) {
        return (
            <div className="min-h-screen flex items-center justify-center">
                <p>ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>
            </div>
        );
    }
    return (
        <div className="min-h-screen bg-background">
            {/* Header */}
            <header className="bg-gradient-primary text-white p-4 shadow-glow">
                <div className="container mx-auto flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                        <Link to="/co-owner/dashboard">
                            <Button variant="ghost" size="sm" className="text-white hover:bg-white/20">
                                <ArrowLeft className="h-4 w-4 mr-2" />
                                Quay l·∫°i
                            </Button>
                        </Link>
                        <div>
                            <h1 className="text-2xl font-bold">Nh√≥m c·ªßa t√¥i</h1>
                            <p className="text-sm opacity-90">Qu·∫£n l√Ω c√°c nh√≥m ƒë·ªìng s·ªü h·ªØu xe b·∫°n tham gia</p>
                        </div>
                    </div>
                </div>
            </header>

            <div className="container mx-auto p-6">
                <main>
                    <section
                        aria-label="Danh s√°ch nh√≥m"
                        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                    >

                        {groups.map((g) => {
                            const myRole = g.roleInGroup || "member";
                            const status = g.status || "active";
                            const ownership = g.ownershipPercentage ?? 0;
                            const groupName = g.group?.groupName || "Kh√¥ng c√≥ t√™n nh√≥m";
                            const createdAt = g.group?.createdAt ? new Date(g.group.createdAt).toLocaleDateString("vi-VN") : "-";

                            // L·∫•y c√°c member kh√°c (tr·ª´ ch√≠nh user hi·ªán t·∫°i)
                            const otherMembers = g.members
                                ?.filter((m) => m.users.id !== currentUserId)
                                .map((m) => ({
                                    id: m.users.id,
                                    name: m.users.hovaTen,
                                    avatar: m.users.avatar ?? "",
                                })) || [];

                            return (
                                <Card key={g.group.groupId} className="relative hover:shadow-elegant transition">
                                    <CardHeader>
                                        <div className="flex items-start justify-between">
                                            <div className="flex items-center gap-3">
                                                <Users className="h-5 w-5 text-primary" />
                                                <div>
                                                    <CardTitle className="text-base">{groupName}</CardTitle>
                                                    <CardDescription>
                                                        Vai tr√≤: <Badge className="ml-1">{myRole.toUpperCase()}</Badge> | Tr·∫°ng th√°i: {status}
                                                    </CardDescription>
                                                    <CardDescription>
                                                        Ng√†y t·∫°o: {createdAt} | S·ªü h·ªØu: {ownership}%
                                                    </CardDescription>
                                                </div>
                                            </div>
                                        </div>
                                    </CardHeader>

                                    <CardContent>
                                        <div className="space-y-3">
                                            <div className="flex -space-x-2">
                                                {otherMembers.slice(0, 5).map((m) => (
                                                    <Avatar key={m.id} className="border">
                                                        <AvatarImage src={m.avatar} alt={`Avatar ${m.name}`} loading="lazy" />
                                                        <AvatarFallback>{m.name?.charAt(0) || "?"}</AvatarFallback>
                                                    </Avatar>
                                                ))}
                                            </div>

                                            <p className="text-sm text-muted-foreground">
                                                Th√†nh vi√™n: {otherMembers.map((m) => m.name).slice(0, 3).join(", ")}
                                                {otherMembers.length > 3 ? ` v√† +${otherMembers.length - 3} n·ªØa` : ""}
                                            </p>

                                            <div className="flex items-center justify-between text-sm">
                                                <span>Ph·∫ßn trƒÉm s·ªü h·ªØu c·ªßa b·∫°n:</span>
                                                <span className="font-semibold">{ownership}%</span>
                                            </div>

                                            <div className="flex gap-2 mt-2">
                                                <Button
                                                    variant="outline"
                                                    className="flex-1"
                                                    onClick={() => navigate(`/co-owner/groups/${g.group.groupId}`)}
                                                >
                                                    Xem chi ti·∫øt
                                                </Button>

                                                <Button
                                                    variant="destructive"
                                                    size="sm"
                                                    onClick={() => handleRequestLeave(g.group.groupId)}
                                                    className="px-3"
                                                >
                                                    <LogOut className="h-4 w-4" />
                                                </Button>
                                            </div>
                                        </div>
                                    </CardContent>
                                </Card>
                            );
                        })}
                    </section>
                </main>
            </div>

            {/* Leave Request Dialog */}
            <Dialog open={leaveRequestDialogOpen} onOpenChange={setLeaveRequestDialogOpen}>
                <DialogContent>
                    <DialogHeader>
                        <DialogTitle className="flex items-center gap-2">
                            <AlertTriangle className="h-5 w-5 text-destructive" />
                            Y√™u c·∫ßu r·ªùi nh√≥m
                        </DialogTitle>
                        <DialogDescription>
                            B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën g·ª≠i y√™u c·∫ßu r·ªùi nh√≥m n√†y kh√¥ng? Y√™u c·∫ßu s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn staff ƒë·ªÉ x√©t
                            duy·ªát.
                        </DialogDescription>
                    </DialogHeader>
                    <div className="py-4">
                        <p className="text-sm text-muted-foreground">
                            <strong>L∆∞u √Ω:</strong> Ch·ªâ staff m·ªõi c√≥ quy·ªÅn ph√™ duy·ªát y√™u c·∫ßu r·ªùi nh√≥m c·ªßa b·∫°n.
                        </p>
                    </div>
                    <DialogFooter>
                        <Button variant="outline" onClick={() => {
                            setLeaveRequestDialogOpen(false);
                            setSelectedGroup("");
                        }}>
                            H·ªßy
                        </Button>
                        <Button variant="destructive" onClick={confirmRequestLeave}>
                            G·ª≠i y√™u c·∫ßu
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    );
}
